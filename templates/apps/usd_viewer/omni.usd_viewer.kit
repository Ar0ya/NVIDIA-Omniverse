[package]
title = "{{ application_display_name }}"
version = "{{ version }}"

description = """This application presents an interactive experience authored with OpenUSD. The application can be hosted on RTX hardware and streamed to other devices. Messaging supports bi-directional communication between this application and the client that incorporates the stream"""

# Extension Manager keyword for filtering.
keywords = ["app"]

[dependencies]
# Create Kit UI Based applications
"omni.kit.uiapp" = {}
"omni.kit.renderer.core" = {}

# Camera and Selection user input
"omni.kit.manipulator.camera" = {}
"omni.kit.manipulator.selection" = {}

# Streaming and messaging functionality
"omni.kit.livestream.webrtc" = {}

# This is your application setup Extensions
# Where you layout the various Window, arrange you menu etc
# order = 1000 make it run last
"{{ extension_name }}" = { order = 1000 }

# Viewport Extensions
#############################################
# The Main Viewport Window
"omni.kit.viewport.window" = {}

# Enable RTX Renderer for your viewport
"omni.hydra.rtx" = {}

# OG extensions to get Configurator action graph working
"omni.graph.action" = { version = "1.58.3", exact = true}
"omni.graph.nodes" = {}
"omni.graph.ui_nodes" = {}
"omni.anim.timeline" = {}
"omni.anim.curve" = {}
"omni.kit.viewport.utility" = {}

# Action Graph Script Node for executing any Python code. Be careful: do not load USD files with unknown contents.
"omni.graph.scriptnode" = {}

# No Code UI support
"omni.no_code_ui.bundle" = {}

# Sequence
"omni.kit.sequencer.core" = {}

# Enable FSD
"usdrt.scenegraph" = {}

"omni.rtx.shadercache.vulkan" = {}

# Windows only extensions. For all of them set exact=true to not be included into generated version lock.
# That will break linux otherwise, as version lock is platform agnostic currently.
[settings.app.extensions."filter:platform"."linux-x86_64"]
excluded = [
	"omni.rtx.shadercache.d3d12",
]

[dependencies."filter:platform"."windows-x86_64"]
"omni.rtx.shadercache.d3d12" = {}

# Debugging
##########################################
# "omni.kit.window.stats" = { order = 1000 }

[settings.persistent]
# Viewport
app.viewport.Viewport.Viewport0.guide.grid.visible = false
app.viewport.Viewport.Viewport0.guide.axis.visible = false
app.viewport.show.lights.visible = false
app.viewport.grid.enabled = false
metricsAssembler.showUnitsOverlay = false

# OmniGraph settings
omnigraph.useSchemaPrims = true
omnigraph.disablePrimNodes = false

# Render Preferences - Material Distilling ON
rtx.mdltranslator.distillMaterial = true

# Texture Streaming - false for local streaming
rtx-transient.resourcemanager.enableTextureStreaming = false

# Sequencer Camera Sync ON
exts."omni.kit.window.sequencer".useSequencerCamera = true

[settings.app.window]
title = "{{ application_display_name }}"

# Width and Height of your Main Window at startup
width = 1920
height = 1080
x = -1
y = -1

[settings.persistent.app]
# Remove default frame around viewport
viewport.noPadding = true

# this is a custom setting used in our app setup to choose the Layout
[settings.app.layout]
name = "default"

[settings]
# Basic Kit App
################################
# this is used in our setup file to display some Version to the user in the title bar
app.titleVersion = "{{ version | default("0.0.1") }}"

# this will create a stage during the startup process
# you don't have too, but be aware the the RTX engine only start
# when there is something to render, so use if false you might want ore adjust the use of
# omni.kit.viewport.ready

# Ensure creation of an empty stage on application startup.
app.content.emptyStageOnStart = true

# enable quiting without confirmation
app.file.ignoreUnsavedOnExit = true

# deprecate support for old kit.ui.menu
app.menu.legacy_mode = false

# force new viewport name
exts."omni.kit.viewport.window".startup.windowName = "Viewport"

# Disable context menu, viewer not editor.
exts."omni.kit.window.viewport".showContextMenu = false

# enable rtx renderer
renderer.enabled = "rtx"

# By default rtx is setup to be mgpu but in some context you might want to run on
# a single gpu if so set this setting to false
renderer.multiGpu.enabled = true

# Skip long full shutdown and exit quickly
app.fastShutdown = true

# Disable texture streaming for improved performance
rtx-transient.resourcemanager.enableTextureStreaming = false

app.viewport.createCameraModelRep = false

# FSD Enabled by default
app.useFabricSceneDelegate = true

# livestream skipCapture ON for local streaming
app.livestream.skipCapture = 1
app.livestream.allowResize = 1

# Debugging
##########################################
persistent.app.viewport.displayOptions = 32255  # Bitmask that controls which performance counters appear in the HUD.

[settings.app]
name = "{{ application_display_name }}"

# Show/Hide the performance counters in the upper right corner of the viewport.
viewport.forceHideFps = true

# default to fill viewport
viewport.defaults.fillViewport = true

# set renderer resolution
renderer.resolution.width = 1920
renderer.resolution.height = 1080

usdrt.scene_delegate.enableProxyCubes = false
# Disabling FSD geometry streaming
usdrt.scene_delegate.geometryStreaming.enabled = false
usdrt.scene_delegate.numFramesBetweenLoadBatches = 1
usdrt.scene_delegate.geometryStreaming.numberOfVerticesToLoadPerChunk = 800000
usdrt.scene_delegate.timeSampledDataStatic = true

# 0: Display everything
# 0.0005: Display all geometry down to around the size of a pixel
# 0.001: Display all geometry bigger than a few pixels
usdrt.scene_delegate.geometryStreaming.solidAngleLimit = 0

# When populating Fabric from USD, merge meshes under scene
# graph instances. Helps with e.g. Tesla
# Needs to be tested more before enabling for Runway
usdrt.population.utils.mergeInstances = false

# Fonts
# You can change the font files here and also adjust its size
# Although most ui have dynamic layout your milage may vary.
# there might be few issue are too low or too high sizes
[settings.app.font]
file = "${fonts}/OpenSans-SemiBold.ttf"
size = 16

# Register extension folder from this repo in kit
# Your application is using Extensions from your applications
# Here they are setup into a single folder "exts" but you can have you own structure if you need
# see we also dd the Extension from the Base application using their extscache
[settings.app.exts]
folders.'++' = ["${app}/../exts", "${app}/../extscache/"]

[settings.exts."omni.appwindow"]
listenF11 = false
listenF7 = false

## Framerate Limit to 60 FPS
[settings]
app.runLoops.main.rateLimitEnabled=true                          # Enable rate limiting on the main thread
app.runLoops.main.rateLimitFrequency=60                          # Lock it to 60fps
app.runLoops.main.rateLimitUsePrecisionSleep=true                # Use precise sleep values to ensure threads sync
app.runLoops.main.syncToPresent=true                             # Sync with the present thread, smooths UI updates
app.runLoops.present.rateLimitEnabled=true                       # Rate limit the present thread
app.runLoops.present.rateLimitFrequency=60                       # Lock it to 60fps
app.runLoops.present.rateLimitUsePrecisionSleep=true             # Use precise sleep values to ensure threads sync
app.runLoops.rendering_0.rateLimitEnabled=true                   # Enable rate limiting for the rendering thread
app.runLoops.rendering_0.rateLimitFrequency=60                   # Lock it to 60fps
app.runLoops.rendering_0.rateLimitUsePrecisionSleep=true         # Use precise sleep values to ensure threads sync
app.runLoops.rendering_0.syncToPresent=true                      # Sync with the present tread, smooths UI updates
app.runLoops.rendering_1.rateLimitEnabled=true                   # Enable rate limiting for the rendering thread
app.runLoops.rendering_1.rateLimitFrequency=60                   # Lock it to 60fps
app.runLoops.rendering_1.rateLimitUsePrecisionSleep=true         # Use precise sleep values to ensure threads sync
app.runLoops.rendering_1.syncToPresent=true                      # Sync with the present tread, smooths UI updates
app.runLoopsGlobal.syncToPresent=true                            # Sync everything with the present thread
app.vsync=true                                                   # Enable vsync
exts."omni.kit.renderer.core".present.enabled=true               # Enable the present thread
exts."omni.kit.renderer.core".present.presentAfterRendering=true # Ensure the present thread waits for the rendering to complete
persistent.app.viewport.defaults.tickRate=60                     # Lock to 60fps
rtx-transient.dlssg.enabled=false                                # Disable DLSS otherwise it can push the framerate above the locked limit


# Tests
################################
[[test]]
args = [
	"--/app/window/width=480",
    "--/app/window/height=480",
    "--/app/extensions/registryEnabled=0", # Make sure we can run without registry and everything is precached
]
